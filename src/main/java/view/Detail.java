/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import info.movito.themoviedbapi.model.Artwork;
import info.movito.themoviedbapi.model.ArtworkType;
import info.movito.themoviedbapi.model.Genre;
import info.movito.themoviedbapi.model.MovieDb;
import info.movito.themoviedbapi.model.ProductionCompany;
import info.movito.themoviedbapi.model.people.PersonCast;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author ngohoa
 */
public class Detail extends javax.swing.JFrame {
    DefaultListModel<String> model;
    private MovieDb movie;

    /**
     * Creates new form Detail
     */
    public Detail(MovieDb movie) {
        model = new DefaultListModel<>();
        this.movie = movie;
        initComponents();
        initMovieDetails();
    }

    private Detail() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        titleLab = new javax.swing.JLabel();
        posterPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Film: ");

        titleLab.setText("jLabel2");

        posterPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        posterPanel.setPreferredSize(new java.awt.Dimension(250, 375));

        javax.swing.GroupLayout posterPanelLayout = new javax.swing.GroupLayout(posterPanel);
        posterPanel.setLayout(posterPanelLayout);
        posterPanelLayout.setHorizontalGroup(
            posterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );
        posterPanelLayout.setVerticalGroup(
            posterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 373, Short.MAX_VALUE)
        );

        jLabel3.setText("info:");

        jButton1.setText("Back");

        jButton2.setText("Ok, i like it");

        jTextAreaInfo.setColumns(20);
        jTextAreaInfo.setLineWrap(true);
        jTextAreaInfo.setRows(5);
        jTextAreaInfo.setEnabled(false);
        jScrollPane1.setViewportView(jTextAreaInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(titleLab))
                    .addComponent(posterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2))
                            .addComponent(jLabel3))))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(titleLab)
                    .addComponent(jLabel3))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(407, 407, 407)
                        .addComponent(jLabel4))
                    .addComponent(posterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Detail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Detail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Detail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Detail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Detail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaInfo;
    private javax.swing.JPanel posterPanel;
    private javax.swing.JLabel titleLab;
    // End of variables declaration//GEN-END:variables

    private void initMovieDetails() {
        titleLab.setText(movie.getTitle());
        //lấy thông tin phim
        List<Genre> genres = movie.getGenres();
        List<PersonCast> personCasts = movie.getCast();
        String overview = movie.getOverview();
        List<ProductionCompany> producers = movie.getProductionCompanies();
        String homePage = movie.getHomepage();
        String releaseDate = movie.getReleaseDate();
        
        float pop = movie.getPopularity();
        int voteCount = movie.getVoteCount();
        //thể loại
        String genre = "Genre: ";
        for (Genre g:genres){
            genre += g.getName();
            genre += ", ";
        }
        genre = genre.substring(0, genre.length()-2);
        //thời gian phát hành
        releaseDate = "Release date: "+releaseDate;
        //hãng sx
        String productionComp = "Production Companies: ";
        for (ProductionCompany pc:producers){
            productionComp += pc.getName();
            productionComp += ", ";
        }
        productionComp = productionComp.substring(0, productionComp.length()-2);
        //rating
        String popu = "Popularity: "+pop;
        //số vote
        String vote = "Vote count: "+voteCount;
        String overviewTitle = "Overview:";
        //dien vien
        String castsTitle = "Casts:";
        String castContent = "";
        for (PersonCast pc:personCasts){
            castContent += pc.getName() + " - " + pc.getCharacter() +"\n";
            
        }
        //homepage
        String home = "Homepage: "+homePage;
        //
        jTextAreaInfo.setText(genre+"\n"
                +releaseDate+"\n"
                +productionComp+"\n"
                +popu+"\n"
                +vote+"\n"
                +overviewTitle+"\n"
                +overview+"\n"
                +castsTitle+"\n"
                +castContent+"\n"+home);
        
        

        
        
//        List<Artwork> artworks = movie.getImages(ArtworkType.POSTER);
//        try {
//
////            URL url = new URL("https://image.tmdb.org/t/p/w500" + artworks.get(0).getFilePath());
//            String imageUrl = "https://image.tmdb.org/t/p/w500" + artworks.get(0).getFilePath();
////            String destinationFile = "image.jpg";
//
////            saveImage(imageUrl, destinationFile);
//            File sourceimage = new File(destinationFile);
//            Image image = ImageIO.read(sourceimage);
////            Image image = ImageIO.read(url);
////            Image scaledImage = image.getScaledInstance(posterPanel.getWidth(), posterPanel.getHeight(), Image.SCALE_SMOOTH);
//
//            JLabel picLabel = new JLabel(new ImageIcon(image));
//            posterPanel.add(picLabel);
//            
////            posterPanel.set
////            posterPanel.repaint();
//        } catch (IOException ex) {
//            System.out.println(artworks.get(0).getFilePath());
//            Logger.getLogger(Detail.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

//    public static void saveImage(String imageUrl, String destinationFile) throws IOException {
//        URL url = new URL(imageUrl);
//        InputStream is = url.openStream();
//        OutputStream os = new FileOutputStream(destinationFile);
//
//        byte[] b = new byte[2048];
//        int length;
//
//        while ((length = is.read(b)) != -1) {
//            os.write(b, 0, length);
//        }
//
//        is.close();
//        os.close();
//    }

}
